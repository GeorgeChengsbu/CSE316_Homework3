{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction';\nimport ChangeItem_Transaction from '../transactions/ChangeItem_Transaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  SET_ITEM_EDIT_ACTIVE: \"SET_ITEM_EDIT_ACTIVE\",\n  SET_MARKED_DELETE_LIST: \"SET_MARKED_DELETE_LIST\",\n  INCREASE_NEW_LIST_COUNTER: \"INCREASE_NEW_LIST_COUNTER\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    isListNameEditActive: false,\n    isItemEditActive: false,\n    listMarkedForDeletion: null\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.top5List,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: true,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_INACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n\n      case GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: true,\n            listMarkedForDeletion: null\n          });\n        }\n\n      case GlobalStoreActionType.SET_MARKED_DELETE_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: payload\n          });\n        }\n\n      case GlobalStoreActionType.INCREASE_NEW_LIST_COUNTER:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter++,\n            isListNameEditActive: store.isListNameEditActive,\n            isItemEditActive: store.isItemEditActive,\n            listMarkedForDeletion: store.listMarkedForDeletion\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      try {\n        let response = await api.getTop5ListById(id);\n\n        if (response.data.success) {\n          let top5List = response.data.top5List;\n          top5List.name = newName;\n\n          async function updateList(top5List) {\n            response = await api.updateTop5ListById(top5List._id, top5List);\n\n            if (response.data.success) {\n              async function getListPairs(top5List) {\n                response = await api.getTop5ListPairs();\n\n                if (response.data.success) {\n                  let pairsArray = response.data.idNamePairs;\n                  storeReducer({\n                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                    payload: {\n                      idNamePairs: pairsArray,\n                      top5List: top5List\n                    }\n                  });\n                }\n              }\n\n              getListPairs(top5List);\n            }\n          }\n\n          updateList(top5List);\n        }\n      } catch (error) {} finally {\n        storeReducer({\n          type: GlobalStoreActionType.SET_LIST_NAME_EDIT_INACTIVE,\n          payload: null\n        });\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getTop5ListPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  }; // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n  // moveItem, updateItem, updateCurrentList, undo, and redo\n\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        response = await api.updateTop5ListById(top5List._id, top5List);\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: top5List\n          });\n          store.history.push(\"/top5list/\" + top5List._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.addMoveItemTransaction = function (start, end) {\n    let transaction = new MoveItem_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n\n  store.moveItem = function (start, end) {\n    start -= 1;\n    end -= 1;\n\n    if (start < end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i < end; i++) {\n        store.currentList.items[i] = store.currentList.items[i + 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } else if (start > end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i > end; i--) {\n        store.currentList.items[i] = store.currentList.items[i - 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } // NOW MAKE IT OFFICIAL\n\n\n    store.updateCurrentList();\n  };\n\n  store.addChangeItemTransaction = function (index, oldText, newText) {\n    let transaction = new ChangeItem_Transaction(store, index, oldText, newText);\n    tps.addTransaction(transaction);\n  };\n\n  store.updateItemName = function (index, text) {\n    store.currentList.items[index] = text;\n    store.updateCurrentList();\n  };\n\n  store.updateCurrentList = function () {\n    async function asyncUpdateCurrentList() {\n      const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n      }\n    }\n\n    asyncUpdateCurrentList();\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  store.setIsItemEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  store.handleDeleteModal = function (id) {\n    async function asyncgetListById(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        storeReducer({\n          type: GlobalStoreActionType.SET_MARKED_DELETE_LIST,\n          payload: top5List\n        });\n      } else {\n        let top5List = response.data.top5List;\n        storeReducer({\n          type: GlobalStoreActionType.SET_MARKED_DELETE_LIST,\n          payload: top5List\n        });\n      }\n    }\n\n    asyncgetListById(id);\n  };\n\n  store.deleteMarkedList = function () {\n    async function asyncDeleteList() {\n      try {\n        let response = await api.deleteTop5ListById(store.listMarkedForDeletion._id);\n      } catch (error) {} finally {\n        store.loadIdNamePairs();\n        storeReducer({\n          type: GlobalStoreActionType.SET_MARKED_DELETE_LIST,\n          payload: null\n        });\n      }\n    }\n\n    asyncDeleteList();\n  };\n\n  store.additionList = function () {\n    async function asyncAdditionList() {\n      let UntitledName = \"Untitled\" + store.newListCounter;\n\n      try {\n        let response = await api.createTop5List({\n          name: UntitledName,\n          items: [\"?\", \"?\", \"?\", \"?\", \"?\"]\n        });\n        store.loadIdNamePairs();\n        storeReducer({\n          type: GlobalStoreActionType.INCREASE_NEW_LIST_COUNTER,\n          payload: null\n        });\n        store.setCurrentList(response.data.top5List._id);\n      } catch (error) {} finally {}\n    }\n\n    asyncAdditionList();\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"MtbAgvbDeFW0Vr1s/JSV8MK3vDQ=\");","map":{"version":3,"sources":["/Users/george/Downloads/Top5Lists_HW3/client/src/store/index.js"],"names":["createContext","useState","jsTPS","api","MoveItem_Transaction","ChangeItem_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","SET_ITEM_EDIT_ACTIVE","SET_MARKED_DELETE_LIST","INCREASE_NEW_LIST_COUNTER","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","isListNameEditActive","isItemEditActive","listMarkedForDeletion","storeReducer","action","type","payload","top5List","SET_LIST_NAME_EDIT_INACTIVE","changeListName","id","newName","asyncChangeListName","response","getTop5ListById","data","success","name","updateList","updateTop5ListById","_id","getListPairs","getTop5ListPairs","pairsArray","error","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","console","log","setCurrentList","asyncSetCurrentList","history","push","addMoveItemTransaction","start","end","transaction","addTransaction","moveItem","temp","items","i","updateCurrentList","addChangeItemTransaction","index","oldText","newText","updateItemName","text","asyncUpdateCurrentList","undo","undoTransaction","redo","doTransaction","setIsListNameEditActive","setIsItemEditActive","handleDeleteModal","asyncgetListById","deleteMarkedList","asyncDeleteList","deleteTop5ListById","additionList","asyncAdditionList","UntitledName","createTop5List"],"mappings":"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","sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction'\nimport ChangeItem_Transaction from '../transactions/ChangeItem_Transaction'\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    SET_ITEM_EDIT_ACTIVE: \"SET_ITEM_EDIT_ACTIVE\",\n    SET_MARKED_DELETE_LIST: \"SET_MARKED_DELETE_LIST\",\n    INCREASE_NEW_LIST_COUNTER: \"INCREASE_NEW_LIST_COUNTER\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        isListNameEditActive: false,\n        isItemEditActive: false,\n        listMarkedForDeletion: null\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.top5List,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: true,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_INACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            case GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: true,\n                    listMarkedForDeletion: null\n                });\n            }\n            case GlobalStoreActionType.SET_MARKED_DELETE_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: payload\n                })\n            }\n            case GlobalStoreActionType.INCREASE_NEW_LIST_COUNTER: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: (store.newListCounter++),\n                    isListNameEditActive: store.isListNameEditActive,\n                    isItemEditActive: store.isItemEditActive,\n                    listMarkedForDeletion: store.listMarkedForDeletion\n                })\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            try{\n            let response = await api.getTop5ListById(id);\n            if (response.data.success) {\n                let top5List = response.data.top5List;\n                top5List.name = newName;\n                async function updateList(top5List) {\n                    response = await api.updateTop5ListById(top5List._id, top5List);\n                    if (response.data.success) {\n                        async function getListPairs(top5List) {\n                            response = await api.getTop5ListPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        top5List: top5List\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(top5List);\n                    }\n                }\n                updateList(top5List);\n            }\n        }\n        catch(error){ \n        }\n        finally{\n            storeReducer({\n                type: GlobalStoreActionType.SET_LIST_NAME_EDIT_INACTIVE,\n                payload: null\n            });  \n        }\n    }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getTop5ListPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n    // moveItem, updateItem, updateCurrentList, undo, and redo\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getTop5ListById(id);\n            if (response.data.success) {\n                let top5List = response.data.top5List;\n\n                response = await api.updateTop5ListById(top5List._id, top5List);\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: top5List\n                    });\n                    store.history.push(\"/top5list/\" + top5List._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.addMoveItemTransaction = function (start, end) {\n        let transaction = new MoveItem_Transaction(store, start, end);\n        tps.addTransaction(transaction);\n    }\n    store.moveItem = function (start, end) {\n        start -= 1;\n        end -= 1;\n        if (start < end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i < end; i++) {\n                store.currentList.items[i] = store.currentList.items[i + 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n        else if (start > end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i > end; i--) {\n                store.currentList.items[i] = store.currentList.items[i - 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n\n        // NOW MAKE IT OFFICIAL\n        store.updateCurrentList();\n    }\n    store.addChangeItemTransaction = function(index, oldText, newText){\n        let transaction = new ChangeItem_Transaction(store, index, oldText, newText);\n        tps.addTransaction(transaction);\n    }\n    store.updateItemName = function (index, text) {\n        store.currentList.items[index] = text;\n        store.updateCurrentList();\n    }\n    store.updateCurrentList = function() {\n        async function asyncUpdateCurrentList() {\n            const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: store.currentList\n                });\n            }\n        }\n        asyncUpdateCurrentList();\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n    store.setIsItemEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n    store.handleDeleteModal = function (id) {\n        async function asyncgetListById(id) {\n            let response = await api.getTop5ListById(id);\n            if (response.data.success) {\n                let top5List = response.data.top5List;\n                storeReducer({\n                    type: GlobalStoreActionType.SET_MARKED_DELETE_LIST,\n                    payload: top5List\n                });\n            }\n            else {\n                let top5List = response.data.top5List;\n                storeReducer({\n                    type: GlobalStoreActionType.SET_MARKED_DELETE_LIST,\n                    payload: top5List\n                });\n            }\n        }\n        asyncgetListById(id);\n    }\n    store.deleteMarkedList = function() {\n        async function asyncDeleteList() {\n            try {\n                let response = await api.deleteTop5ListById(store.listMarkedForDeletion._id);\n            }\n            catch(error) {\n            }\n            finally{\n                store.loadIdNamePairs();\n                storeReducer({\n                    type: GlobalStoreActionType.SET_MARKED_DELETE_LIST,\n                    payload: null\n                });\n            }\n        }\n        asyncDeleteList();\n    }\n    store.additionList = function() {\n        async function asyncAdditionList() {\n            let UntitledName = \"Untitled\" + store.newListCounter\n            try{\n                let response = await api.createTop5List({\n                    name: UntitledName,\n                    items: [\"?\", \"?\", \"?\", \"?\", \"?\"]\n                })\n                store.loadIdNamePairs();\n                storeReducer({\n                    type: GlobalStoreActionType.INCREASE_NEW_LIST_COUNTER,\n                    payload: null\n                });\n                store.setCurrentList(response.data.top5List._id);\n            }\n            catch(error) {\n            }\n            finally{\n            }\n        }\n        asyncAdditionList();\n    }\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"]},"metadata":{},"sourceType":"module"}